name: Test

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
      - releases/*
  push:
    branches:
      - main
      - releases/*

  schedule:
    - cron: '55 23 * * 5' # Runs at 23:55 every Friday

permissions:
  contents: read

jobs:
  scanwise-cli-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Scanwise install test - from internet
        run: |
          cp ./scripts/install.sh /tmp
          cd /tmp
          cat ./install.sh | bash

      - name: Check Install
        run: |
          grep "scanwise" ~/.bashrc
          ls -lah $HOME/.scanwise/makefile.sh
          $HOME/.scanwise/makefile.sh help

  scanwise-cli-test-from-git:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Scanwise install test - from git
        run: |
          cat ./scripts/install.sh | bash

      - name: Check Install
        run: |
          grep "scanwise" ~/.bashrc
          ls -lah $HOME/.scanwise/makefile.sh
          $HOME/.scanwise/makefile.sh help

      - name: Scanwise uninstall test
        run: |
          $HOME/.scanwise/makefile.sh uninstall

      - name: Check Uninstall
        run: |
          if [[ -d "$HOME/.scanwise" ]]; then
            echo "scanwise scriptlet is not uninstalled - bad"
            exit 1
          else
            echo "scanwise scriptlet removed - good"
          fi

  scanwise-action-integration-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create a dummy pre-scan script (if path is used)
        run: |
          echo '#!/bin/bash' > /tmp/myscript.sh
          echo 'echo "Running pre-scan script!"' >> /tmp/myscript.sh
          chmod +x /tmp/myscript.sh

      - name: Scanwise Scan
        id: scanwise
        uses: ./
        with:
          sonar-source-path: 'integration-test/src/main/java'
          sonar-metrics-path: './blahblah.json'
          sonar-instance-port: '9999'
          pre-scan-script: '/tmp/myscript.sh'
          new-code-n-days: '15d'
          reports-scopes: '["overall","new"]'
          reports-extensions: '["md","html"]'
          reports-retention-days: '1'

      # Check setup (step id: setup)
      - name: Check setup outputs
        run: |
          echo "Started: ${{ steps.scanwise.outputs.started }}"
          if [ ! -d reports ]; then echo "::error::reports dir not found"; exit 1; fi
          if [ ! -d reports/overall ]; then echo "::error::reports/overall dir not found"; exit 1; fi
          if [ ! -d reports/new ]; then echo "::error::reports/new dir not found"; exit 1; fi

      - name: Check Sonar Metrics
        run: |
          echo "Checking for 38 lines in Sonar Metrics JSON"
          LINES=$(cat ./blahblah.json | jq -r '.component.measures[] | select(.metric == "ncloc").value')
          [ "${LINES}" -eq "38" ]

          echo "Checking for 10 issues in Sonar Metrics JSON"
          ISSUES=$(cat ./blahblah.json | jq -r '.component.measures[] | select(.metric == "open_issues").value')
          [ "${ISSUES}" -eq "10" ]
          
          echo "Checking for 1 vulnerability in Sonar Metrics JSON"
          VULN=$(cat ./blahblah.json | jq -r '.component.measures[] | select(.metric == "vulnerabilities").value')
          [ "${VULN}" -eq "1" ]

          echo "Checking for 3 bugs in Sonar Metrics JSON"
          BUGS=$(cat ./blahblah.json | jq -r '.component.measures[] | select(.metric == "bugs").value')
          [ "${BUGS}" -eq "3" ]

          echo "Checking for 6 code smells in Sonar Metrics JSON"
          SMELLS=$(cat ./blahblah.json | jq -r '.component.measures[] | select(.metric == "code_smells").value')
          [ "${SMELLS}" -eq "6" ]

          echo "Checking for 3 security hotspots in Sonar Metrics JSON"
          HOTSPOTS=$(cat ./blahblah.json | jq -r '.component.measures[] | select(.metric == "security_hotspots").value')
          [ "${HOTSPOTS}" -eq "3" ]

      # Check overall report generation
      - name: Check overall report
        run: |
          if [ ! -f reports/overall/issues-report.md ]; then
            echo "::error::Overall issues-report.md missing"
            exit 1
          fi
          if [ ! -f reports/overall/issues-report.html ]; then
            echo "::error::Overall issues-report.html missing"
            exit 1
          fi
          echo "Overall reports present"

      # Check new code report generation
      - name: Check new code report
        run: |
          if [ ! -f reports/new/issues-report.md ]; then
            echo "::error::New code issues-report.md missing"
            exit 1
          fi
          if [ ! -f reports/new/issues-report.html ]; then
            echo "::error::New code issues-report.html missing"
            exit 1
          fi
          echo "New code reports present"

      # Check summary output
      - name: Check summary output
        run: |
          summary="${{ steps.scanwise.outputs.scanwise-analysis-summary }}"
          echo "$summary" | grep -q "# üåü \*\*Scanwise Analysis Summary for scanwise\*\* üåü"
          echo "$summary" | grep -q "\*\*üìä Lines of Code (LoC):\*\* 38"
          echo "$summary" | grep -q "\*\*üí° Code Smells:\*\* 6"
          echo "$summary" | grep -q "\*\*üêû Bugs:\*\* 3"
          echo "$summary" | grep -q "\*\*üî• Security Hotspots:\*\* 3"

      # Check uploaded artifacts
      - name: Check artifacts uploaded
        run: |
          echo "Overall artifact id: ${{ steps.scanwise.outputs.scanwise-overall-code-reports-artifact-id }}"
          echo "New code artifact id: ${{ steps.scanwise.outputs.scanwise-new-code-reports-artifact-id }}"
          # Just check non-empty
          if [ -z "${{ steps.scanwise.outputs.scanwise-overall-code-reports-artifact-id }}" ]; then exit 1; fi
          if [ -z "${{ steps.scanwise.outputs.scanwise-new-code-reports-artifact-id }}" ]; then exit 1; fi

  scanwise-action-unit-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Run tests
        run: |
          chmod +x ./scripts/tests/run_tests.sh
          ./scripts/tests/run_tests.sh
